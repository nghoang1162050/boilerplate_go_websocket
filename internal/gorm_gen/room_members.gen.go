// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gorm_gen

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"boilerplate_go_websocket/internal/model"
)

func newRoomMember(db *gorm.DB, opts ...gen.DOOption) roomMember {
	_roomMember := roomMember{}

	_roomMember.roomMemberDo.UseDB(db, opts...)
	_roomMember.roomMemberDo.UseModel(&model.RoomMember{})

	tableName := _roomMember.roomMemberDo.TableName()
	_roomMember.ALL = field.NewAsterisk(tableName)
	_roomMember.RoomID = field.NewString(tableName, "room_id")
	_roomMember.UserID = field.NewString(tableName, "user_id")
	_roomMember.JoinedAt = field.NewTime(tableName, "joined_at")
	_roomMember.RoomMembers = roomMemberHasOneRoomMembers{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("RoomMembers", "model.User"),
	}

	_roomMember.Room = roomMemberHasOneRoom{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Room", "model.Room"),
		Host: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Room.Host", "model.User"),
		},
	}

	_roomMember.fillFieldMap()

	return _roomMember
}

type roomMember struct {
	roomMemberDo roomMemberDo

	ALL         field.Asterisk
	RoomID      field.String
	UserID      field.String
	JoinedAt    field.Time
	RoomMembers roomMemberHasOneRoomMembers

	Room roomMemberHasOneRoom

	fieldMap map[string]field.Expr
}

func (r roomMember) Table(newTableName string) *roomMember {
	r.roomMemberDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r roomMember) As(alias string) *roomMember {
	r.roomMemberDo.DO = *(r.roomMemberDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *roomMember) updateTableName(table string) *roomMember {
	r.ALL = field.NewAsterisk(table)
	r.RoomID = field.NewString(table, "room_id")
	r.UserID = field.NewString(table, "user_id")
	r.JoinedAt = field.NewTime(table, "joined_at")

	r.fillFieldMap()

	return r
}

func (r *roomMember) WithContext(ctx context.Context) IRoomMemberDo {
	return r.roomMemberDo.WithContext(ctx)
}

func (r roomMember) TableName() string { return r.roomMemberDo.TableName() }

func (r roomMember) Alias() string { return r.roomMemberDo.Alias() }

func (r roomMember) Columns(cols ...field.Expr) gen.Columns { return r.roomMemberDo.Columns(cols...) }

func (r *roomMember) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *roomMember) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 5)
	r.fieldMap["room_id"] = r.RoomID
	r.fieldMap["user_id"] = r.UserID
	r.fieldMap["joined_at"] = r.JoinedAt

}

func (r roomMember) clone(db *gorm.DB) roomMember {
	r.roomMemberDo.ReplaceConnPool(db.Statement.ConnPool)
	r.RoomMembers.db = db.Session(&gorm.Session{Initialized: true})
	r.RoomMembers.db.Statement.ConnPool = db.Statement.ConnPool
	r.Room.db = db.Session(&gorm.Session{Initialized: true})
	r.Room.db.Statement.ConnPool = db.Statement.ConnPool
	return r
}

func (r roomMember) replaceDB(db *gorm.DB) roomMember {
	r.roomMemberDo.ReplaceDB(db)
	r.RoomMembers.db = db.Session(&gorm.Session{})
	r.Room.db = db.Session(&gorm.Session{})
	return r
}

type roomMemberHasOneRoomMembers struct {
	db *gorm.DB

	field.RelationField
}

func (a roomMemberHasOneRoomMembers) Where(conds ...field.Expr) *roomMemberHasOneRoomMembers {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a roomMemberHasOneRoomMembers) WithContext(ctx context.Context) *roomMemberHasOneRoomMembers {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a roomMemberHasOneRoomMembers) Session(session *gorm.Session) *roomMemberHasOneRoomMembers {
	a.db = a.db.Session(session)
	return &a
}

func (a roomMemberHasOneRoomMembers) Model(m *model.RoomMember) *roomMemberHasOneRoomMembersTx {
	return &roomMemberHasOneRoomMembersTx{a.db.Model(m).Association(a.Name())}
}

func (a roomMemberHasOneRoomMembers) Unscoped() *roomMemberHasOneRoomMembers {
	a.db = a.db.Unscoped()
	return &a
}

type roomMemberHasOneRoomMembersTx struct{ tx *gorm.Association }

func (a roomMemberHasOneRoomMembersTx) Find() (result *model.User, err error) {
	return result, a.tx.Find(&result)
}

func (a roomMemberHasOneRoomMembersTx) Append(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a roomMemberHasOneRoomMembersTx) Replace(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a roomMemberHasOneRoomMembersTx) Delete(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a roomMemberHasOneRoomMembersTx) Clear() error {
	return a.tx.Clear()
}

func (a roomMemberHasOneRoomMembersTx) Count() int64 {
	return a.tx.Count()
}

func (a roomMemberHasOneRoomMembersTx) Unscoped() *roomMemberHasOneRoomMembersTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type roomMemberHasOneRoom struct {
	db *gorm.DB

	field.RelationField

	Host struct {
		field.RelationField
	}
}

func (a roomMemberHasOneRoom) Where(conds ...field.Expr) *roomMemberHasOneRoom {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a roomMemberHasOneRoom) WithContext(ctx context.Context) *roomMemberHasOneRoom {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a roomMemberHasOneRoom) Session(session *gorm.Session) *roomMemberHasOneRoom {
	a.db = a.db.Session(session)
	return &a
}

func (a roomMemberHasOneRoom) Model(m *model.RoomMember) *roomMemberHasOneRoomTx {
	return &roomMemberHasOneRoomTx{a.db.Model(m).Association(a.Name())}
}

func (a roomMemberHasOneRoom) Unscoped() *roomMemberHasOneRoom {
	a.db = a.db.Unscoped()
	return &a
}

type roomMemberHasOneRoomTx struct{ tx *gorm.Association }

func (a roomMemberHasOneRoomTx) Find() (result *model.Room, err error) {
	return result, a.tx.Find(&result)
}

func (a roomMemberHasOneRoomTx) Append(values ...*model.Room) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a roomMemberHasOneRoomTx) Replace(values ...*model.Room) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a roomMemberHasOneRoomTx) Delete(values ...*model.Room) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a roomMemberHasOneRoomTx) Clear() error {
	return a.tx.Clear()
}

func (a roomMemberHasOneRoomTx) Count() int64 {
	return a.tx.Count()
}

func (a roomMemberHasOneRoomTx) Unscoped() *roomMemberHasOneRoomTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type roomMemberDo struct{ gen.DO }

type IRoomMemberDo interface {
	gen.SubQuery
	Debug() IRoomMemberDo
	WithContext(ctx context.Context) IRoomMemberDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRoomMemberDo
	WriteDB() IRoomMemberDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRoomMemberDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRoomMemberDo
	Not(conds ...gen.Condition) IRoomMemberDo
	Or(conds ...gen.Condition) IRoomMemberDo
	Select(conds ...field.Expr) IRoomMemberDo
	Where(conds ...gen.Condition) IRoomMemberDo
	Order(conds ...field.Expr) IRoomMemberDo
	Distinct(cols ...field.Expr) IRoomMemberDo
	Omit(cols ...field.Expr) IRoomMemberDo
	Join(table schema.Tabler, on ...field.Expr) IRoomMemberDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRoomMemberDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRoomMemberDo
	Group(cols ...field.Expr) IRoomMemberDo
	Having(conds ...gen.Condition) IRoomMemberDo
	Limit(limit int) IRoomMemberDo
	Offset(offset int) IRoomMemberDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRoomMemberDo
	Unscoped() IRoomMemberDo
	Create(values ...*model.RoomMember) error
	CreateInBatches(values []*model.RoomMember, batchSize int) error
	Save(values ...*model.RoomMember) error
	First() (*model.RoomMember, error)
	Take() (*model.RoomMember, error)
	Last() (*model.RoomMember, error)
	Find() ([]*model.RoomMember, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RoomMember, err error)
	FindInBatches(result *[]*model.RoomMember, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.RoomMember) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRoomMemberDo
	Assign(attrs ...field.AssignExpr) IRoomMemberDo
	Joins(fields ...field.RelationField) IRoomMemberDo
	Preload(fields ...field.RelationField) IRoomMemberDo
	FirstOrInit() (*model.RoomMember, error)
	FirstOrCreate() (*model.RoomMember, error)
	FindByPage(offset int, limit int) (result []*model.RoomMember, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRoomMemberDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r roomMemberDo) Debug() IRoomMemberDo {
	return r.withDO(r.DO.Debug())
}

func (r roomMemberDo) WithContext(ctx context.Context) IRoomMemberDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r roomMemberDo) ReadDB() IRoomMemberDo {
	return r.Clauses(dbresolver.Read)
}

func (r roomMemberDo) WriteDB() IRoomMemberDo {
	return r.Clauses(dbresolver.Write)
}

func (r roomMemberDo) Session(config *gorm.Session) IRoomMemberDo {
	return r.withDO(r.DO.Session(config))
}

func (r roomMemberDo) Clauses(conds ...clause.Expression) IRoomMemberDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r roomMemberDo) Returning(value interface{}, columns ...string) IRoomMemberDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r roomMemberDo) Not(conds ...gen.Condition) IRoomMemberDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r roomMemberDo) Or(conds ...gen.Condition) IRoomMemberDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r roomMemberDo) Select(conds ...field.Expr) IRoomMemberDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r roomMemberDo) Where(conds ...gen.Condition) IRoomMemberDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r roomMemberDo) Order(conds ...field.Expr) IRoomMemberDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r roomMemberDo) Distinct(cols ...field.Expr) IRoomMemberDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r roomMemberDo) Omit(cols ...field.Expr) IRoomMemberDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r roomMemberDo) Join(table schema.Tabler, on ...field.Expr) IRoomMemberDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r roomMemberDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRoomMemberDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r roomMemberDo) RightJoin(table schema.Tabler, on ...field.Expr) IRoomMemberDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r roomMemberDo) Group(cols ...field.Expr) IRoomMemberDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r roomMemberDo) Having(conds ...gen.Condition) IRoomMemberDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r roomMemberDo) Limit(limit int) IRoomMemberDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r roomMemberDo) Offset(offset int) IRoomMemberDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r roomMemberDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRoomMemberDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r roomMemberDo) Unscoped() IRoomMemberDo {
	return r.withDO(r.DO.Unscoped())
}

func (r roomMemberDo) Create(values ...*model.RoomMember) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r roomMemberDo) CreateInBatches(values []*model.RoomMember, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r roomMemberDo) Save(values ...*model.RoomMember) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r roomMemberDo) First() (*model.RoomMember, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.RoomMember), nil
	}
}

func (r roomMemberDo) Take() (*model.RoomMember, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.RoomMember), nil
	}
}

func (r roomMemberDo) Last() (*model.RoomMember, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.RoomMember), nil
	}
}

func (r roomMemberDo) Find() ([]*model.RoomMember, error) {
	result, err := r.DO.Find()
	return result.([]*model.RoomMember), err
}

func (r roomMemberDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RoomMember, err error) {
	buf := make([]*model.RoomMember, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r roomMemberDo) FindInBatches(result *[]*model.RoomMember, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r roomMemberDo) Attrs(attrs ...field.AssignExpr) IRoomMemberDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r roomMemberDo) Assign(attrs ...field.AssignExpr) IRoomMemberDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r roomMemberDo) Joins(fields ...field.RelationField) IRoomMemberDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r roomMemberDo) Preload(fields ...field.RelationField) IRoomMemberDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r roomMemberDo) FirstOrInit() (*model.RoomMember, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.RoomMember), nil
	}
}

func (r roomMemberDo) FirstOrCreate() (*model.RoomMember, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.RoomMember), nil
	}
}

func (r roomMemberDo) FindByPage(offset int, limit int) (result []*model.RoomMember, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r roomMemberDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r roomMemberDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r roomMemberDo) Delete(models ...*model.RoomMember) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *roomMemberDo) withDO(do gen.Dao) *roomMemberDo {
	r.DO = *do.(*gen.DO)
	return r
}
